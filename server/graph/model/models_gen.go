// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Agent struct {
	Fingerprint string    `json:"fingerprint"`
	Created     string    `json:"created"`
	NetworkName string    `json:"networkName"`
	Groups      []*string `json:"groups,omitempty"`
	AssignedIP  *string   `json:"assignedIP,omitempty"`
	IssuedAt    *string   `json:"issuedAt,omitempty"`
	ExpiresAt   *string   `json:"expiresAt,omitempty"`
	Name        *string   `json:"name,omitempty"`
}

type Ca struct {
	Fingerprint string   `json:"fingerprint"`
	Status      CAStatus `json:"status"`
	IssuedAt    string   `json:"issuedAt"`
	ExpiresAt   string   `json:"expiresAt"`
}

type EnrollmentRequest struct {
	Fingerprint string    `json:"fingerprint"`
	Created     string    `json:"created"`
	NetworkName string    `json:"networkName"`
	ClientIP    *string   `json:"clientIP,omitempty"`
	Name        *string   `json:"name,omitempty"`
	RequestedIP *string   `json:"requestedIP,omitempty"`
	Groups      []*string `json:"groups,omitempty"`
}

type Network struct {
	Name               string               `json:"name"`
	Duration           *string              `json:"duration,omitempty"`
	Groups             []*string            `json:"groups,omitempty"`
	Ips                []*string            `json:"ips,omitempty"`
	Subnets            []*string            `json:"subnets,omitempty"`
	IPPools            []*string            `json:"ipPools,omitempty"`
	Agents             []*Agent             `json:"agents,omitempty"`
	EnrollmentToken    *string              `json:"enrollmentToken,omitempty"`
	EnrollmentRequests []*EnrollmentRequest `json:"enrollmentRequests,omitempty"`
	Cas                []*Ca                `json:"cas,omitempty"`
}

type User struct {
	ID          string       `json:"id"`
	Name        string       `json:"name"`
	Email       string       `json:"email"`
	UserApprove *UserApprove `json:"userApprove,omitempty"`
	Disabled    bool         `json:"disabled"`
}

type UserApprove struct {
	Approved       bool   `json:"approved"`
	ApprovedBy     string `json:"approvedBy"`
	ApprovedByUser *User  `json:"approvedByUser,omitempty"`
	ApprovedAt     string `json:"approvedAt"`
}

type CAStatus string

const (
	CAStatusActive   CAStatus = "active"
	CAStatusExpired  CAStatus = "expired"
	CAStatusInactive CAStatus = "inactive"
	CAStatusNext     CAStatus = "next"
)

var AllCAStatus = []CAStatus{
	CAStatusActive,
	CAStatusExpired,
	CAStatusInactive,
	CAStatusNext,
}

func (e CAStatus) IsValid() bool {
	switch e {
	case CAStatusActive, CAStatusExpired, CAStatusInactive, CAStatusNext:
		return true
	}
	return false
}

func (e CAStatus) String() string {
	return string(e)
}

func (e *CAStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CAStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CAStatus", str)
	}
	return nil
}

func (e CAStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
